@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations

<NavLink Href="@Href"
    class="group flex items-center gap-3 rounded-md px-4 py-2 text-sm font-medium transition-colors hover:bg-[--mud-palette-primary-hover] hover:text-white"
    Match="@Match" ActiveClass="active-navlink text-white">
    <MudIcon Icon="@GetCurrentIcon()" Color="@IconColor" Class="group-hover:text-white transition-colors"
        style="width: 20px;" />
    <span class="truncate group-hover:text-white font-size14">@Content</span>
</NavLink>

@code {
    [Parameter, Required] public string Href { get; set; }
    [Parameter, Required] public string Content { get; set; }

    [Parameter, Required] public string IconOutlined { get; set; }
    [Parameter, Required] public string IconRounded { get; set; }

    [Parameter] public Color IconColor { get; set; } = Color.Inherit;
    [Parameter] public NavLinkMatch Match { get; set; }

    private string GetCurrentIcon()
    {
        var current = NavManager.ToBaseRelativePath(NavManager.Uri).Trim('/');
        var target = Href.TrimStart('/');

        bool isActive = Match == NavLinkMatch.All
        ? string.Equals(current, target, StringComparison.OrdinalIgnoreCase)
        : current.StartsWith(target, StringComparison.OrdinalIgnoreCase);

        return isActive ? IconRounded : IconOutlined;
    }
}
