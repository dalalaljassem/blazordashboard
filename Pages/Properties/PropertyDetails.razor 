@page "/properties"

<MudContainer MaxWidth="MaxWidth.False" Class="p-4">
    <MudText Typo="Typo.h5" Class="mb-4 font-bold">Properties</MudText>

    <!-- Add Property Button -->
    <div class="flex justify-end mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddProperty">+ Add Property</MudButton>
    </div>

    <!-- Property Table -->
    <MudTable Items="@properties" Hover="true" Dense="true" Bordered="true" Class="rounded-lg">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Address</MudTh>
            <MudTh>Status</MudTh>
            <MudTh class="text-right">Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Type">@context.Type</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd DataLabel="Status">
                <MudChip Color="@(context.Status == "Active" ? Color.Success : Color.Secondary)" Variant="Variant.Outlined">
                    @context.Status
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Actions" class="text-right">
                <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Primary" OnClick="() => ViewProperty(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="() => EditProperty(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => ConfirmDelete(context)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No properties found.</MudText>
        </NoRecordsContent>
    </MudTable>

    <!-- Add/Edit Property Stepper (can be modal or section) -->
    @if (showForm)
    {
        <MudPaper Class="mt-6 p-4 rounded-lg">
            <MudStepper Elevation="0" @bind-ActiveStep="step" Linear="true">
                <MudStep Title="Basic Info">
                    <MudTextField Label="Property Name" @bind-Value="currentProperty.Name" Variant="Variant.Outlined" Class="mb-4" />
                    <MudTextField Label="Type" @bind-Value="currentProperty.Type" Variant="Variant.Outlined" Class="mb-4" />
                    <MudTextField Label="Status" @bind-Value="currentProperty.Status" Variant="Variant.Outlined" Class="mb-4" />
                </MudStep>
                <MudStep Title="Location">
                    <MudTextField Label="Address" @bind-Value="currentProperty.Address" Variant="Variant.Outlined" Class="mb-4" />
                    <MudTextField Label="City" @bind-Value="currentProperty.City" Variant="Variant.Outlined" Class="mb-4" />
                </MudStep>
                <MudStep Title="Summary">
                    <MudText Typo="Typo.subtitle1">Review your details before saving</MudText>
                    <MudText><b>Name:</b> @currentProperty.Name</MudText>
                    <MudText><b>Type:</b> @currentProperty.Type</MudText>
                    <MudText><b>Status:</b> @currentProperty.Status</MudText>
                    <MudText><b>Address:</b> @currentProperty.Address</MudText>
                    <MudText><b>City:</b> @currentProperty.City</MudText>
                </MudStep>
            </MudStepper>
            <div class="mt-4 flex justify-end gap-2">
                <MudButton Variant="Variant.Text" OnClick="CloseForm">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveProperty">Save</MudButton>
            </div>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<Property> properties = new()
    {
        new Property { Id = 1, Name = "Ocean View Villa", Type = "Villa", Address = "Salmiya, Block 4", Status = "Active", City = "Kuwait" },
        new Property { Id = 2, Name = "Skyline Tower", Type = "Apartment", Address = "Sharq, Kuwait City", Status = "Inactive", City = "Kuwait" }
    };

    private bool showForm = false;
    private int step = 0;
    private Property currentProperty = new();

    private void OpenAddProperty()
    {
        currentProperty = new();
        showForm = true;
        step = 0;
    }

    private void ViewProperty(Property property)
    {
        // Placeholder
    }

    private void EditProperty(Property property)
    {
        currentProperty = new Property
        {
            Id = property.Id,
            Name = property.Name,
            Type = property.Type,
            Status = property.Status,
            Address = property.Address,
            City = property.City
        };
        showForm = true;
        step = 0;
    }

    private void ConfirmDelete(Property property)
    {
        properties.Remove(property);
    }

    private void SaveProperty()
    {
        if (!properties.Any(p => p.Id == currentProperty.Id))
        {
            currentProperty.Id = properties.Max(p => p.Id) + 1;
            properties.Add(currentProperty);
        }
        else
        {
            var existing = properties.First(p => p.Id == currentProperty.Id);
            existing.Name = currentProperty.Name;
            existing.Type = currentProperty.Type;
            existing.Status = currentProperty.Status;
            existing.Address = currentProperty.Address;
            existing.City = currentProperty.City;
        }

        showForm = false;
        currentProperty = new();
    }

    private void CloseForm()
    {
        showForm = false;
    }

    public class Property
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public string Status { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
    }
}
