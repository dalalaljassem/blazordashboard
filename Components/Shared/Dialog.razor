@using MudBlazor

<MudDialog MaxWidth="MaxWidth.Small" FullWidth="true" Class="rounded-lg shadow-none" Elevation="0">
    <DialogContent>
        <MudStack Spacing="2" Row="true" Class="text-center">
            <!-- Icon in a soft circle -->
            <div class="flex justify-center">
                <div class="circle flex items-center justify-center">
                    <MudIcon Icon="@Icon" Size="Size.Small" class="text-red" />
                </div>
            </div>

            <!-- Title & Message -->
            <div class="flex flex-column justify-content-start align-items-start ">
                <h6 Class="font-semibold">@Title</h6>
                <h6 Class="text-gray">@Message</h6>

            </div>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <div class="flex justify-end px-6 pb-4 pt-2 gap-2">
            @if (ShowCancel)
            {
                <Button Variant="Variant.Text" OnClick="Cancel">
                    @CancelText
                </Button>
            }
            <Button Variant="Variant.Filled" OnClick="Confirm" Class="btn-red">
                @ConfirmText
            </Button>

        </div>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string Title { get; set; } = "Delete Property";
    [Parameter] public string Message { get; set; } = "Are you sure you want to delete this item?";
    [Parameter] public string ConfirmText { get; set; } = "Delete";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public bool ShowCancel { get; set; } = true;
    [Parameter] public string Icon { get; set; } = Icons.Material.Outlined.WarningAmber;
    [Parameter] public Color Color { get; set; } = Color.Error;
    [Parameter] public EventCallback OnConfirmed { get; set; }

    private async Task Confirm()
    {
        await OnConfirmed.InvokeAsync();
        @* MudDialog.Close(DialogResult.Ok(true)); *@
    }

    private void Cancel()
    {
        @* MudDialog.Cancel(); *@
    }
}
